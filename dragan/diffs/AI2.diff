9,14c9,14
< #define OUTPUT 0
< #define EXP_C 2 // exploration constant za monte carla
< #define DEBUG 1
< #define INF 1000000000
< #define BFACTOR 6.5 // branching factor
< #define FILENAME "file.txt"
---
> #define OUTPUT   0
> #define EXP_C    2          /* exploration constant za monte carla */
> #define DEBUG    1
> #define INF      1000000000 /* ovo je sasvim dovoljno */
> #define BFACTOR  6.5        /* branching factor */
> #define FILENAME "file.txt" /* fajl za i/o poteza */
43a44,45
>     if (b->playerOnTurn != *player)
>         return;
193c195
<         return heur1(b, player);
---
>         return (b->win==3) ? 2 + player - 1 : heur1(b, player);
214c216
<                 if (b->tiles[j][k]==3-player)
---
>                 else if (b->tiles[j][k]==3-player)
224,272d225
< heur5(Board *b, int player)
< {
<     int bigS1=0, bigS2=0, s1=0, s2=0, x, y, power, n;
<     double res=0;
<     if (b->lastMove==-1)
<         return 0;
<     if (b->win)
<         return heur1(b, player);
<     for (int i=8; i>=0; --i) {
<         bigS1*=3;
<         bigS2*=3;
<         if (b->bigTile[i]==3-player) {
<             bigS1+=2;
<             bigS2+=1;
<         }
<         else if (b->bigTile[i]==player) {
<             bigS1+=1;
<             bigS2+=2;
<         }
<         else if (b->bigTile[i]==3) {
<             bigS1+=2;
<             bigS2+=2;
<         }
<     }
<     n=b->lastMove/9/3*3+b->lastMove%9/3;
<     if (b->bigTile[n])
<         return heurVal[bigS1];
<     power=pow(3, n);
<     x=n%3*3;
<     y=n/3*3;
<     for (int j=y; j<y+3; ++j) {
<         for (int k=x; k<x+3; ++k) {
<             s1*=3;
<             s2*=3;
<             if (b->tiles[j][k]==player) {
<                 s1+=1;
<                 s2+=2;
<             }
<             else if (b->tiles[j][k]==3-player) {
<                 s1+=2;
<                 s2+=1;
<             }
<         }
<     }
<     res=heurVal[s1]*heurVal[bigS1+power];
<     return res;
< }
< 
< double
347a301,304
>             if (DEBUG && CLI) {
>                 mvprintw(14, 5, "       ");
>                 mvprintw(14, 5, "%.2lf", bestVal);
>             }
364c321
< AIMinimaxMove(Board *b, int player, double time, int heur)
---
> AIMinimaxMove(Board *b, int player, double time, int heur, int maxDepth)
373c330,331
<     while(1.0*(clock()-start)/CLOCKS_PER_SEC<time/BFACTOR) {
---
>     refresh();
>     while(1.0*(clock()-start)/CLOCKS_PER_SEC<time/BFACTOR && depth <= maxDepth) {
376a335,341
>     if (DEBUG && CLI) {
>         mvprintw(14, 0, "     ");
>         mvprintw(14, 0, "%d", depth-1);
>         mvprintw(15, 0, "            ");
>         mvprintw(15, 0, "%.2f", 1.0*(clock()-start)/CLOCKS_PER_SEC);
>     }
>     refresh();
543a509,511
>     if (DEBUG && CLI) mvprintw(16, 0, "                   ");
>     if (DEBUG && CLI) mvprintw(16, 0, "%7d  %3.2f%%", root->down[best]->plays,
>             100./3*root->down[best]->wins/root->down[best]->plays);
591a560,561
>     if (DEBUG && CLI) mvprintw(15, 0, "                    ");
>     if (DEBUG && CLI) mvprintw(15, 0, "%7d  %3.2f%%", maxi, max*100./maxi/3);
603c573
<     AIMinimaxMove(b, b->playerOnTurn, 0.1, 4);
---
>     AIMinimaxMove(b, b->playerOnTurn, 1, 4, 100);
